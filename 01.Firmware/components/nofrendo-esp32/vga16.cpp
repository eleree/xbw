#include "fabgl.h"
#include "fabui.h"
#include "displaycontroller.h"
#include "freertos/FreeRTOS.h"

#define DEBUG   1
fabgl::VGAController DisplayController;

//fabgl::RGB888 myPalette[256] = {0};
const uint8_t warnBitmap_data[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00,
  0x00, 0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x00, 0x00,
  0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc0, 0xc0, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x00,
  0x00, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
const fabgl::Bitmap warnBitmap = fabgl::Bitmap(16, 16, &warnBitmap_data[0], fabgl::PixelFormat::RGBA2222);


static inline __attribute__((always_inline)) void VGA16_SETPIXEL(int x, int y, int value) {
  auto row = (uint8_t*) DisplayController.getScanline(y);
  int brow = x >> 1;
  row[brow] = (x & 1) ? ((row[brow] & 0xf0) | value) : ((row[brow] & 0x0f) | (value << 4));
}

extern uint16_t myPalette[];

//RGB565 to index
uint8_t toPalette(uint16_t c)
{
    fabgl::RGB888 rgb;
    //c=(pal[i].b>>3)+((pal[i].g>>2)<<5)+((pal[i].r>>3)<<11);

    rgb.R = ((c >> 11) & 0x1F) << 3;
    rgb.G = ((c >> 5 ) & 0x3F) << 2;
    rgb.B = (c & 0x1F) << 3;

    return 0;
    //return DisplayController.RGB888toPaletteIndex(rgb);

}

fabgl::RGB222 toRGB222(uint16_t c)
{
    fabgl::RGB888 rgb;
    //c=(pal[i].b>>3)+((pal[i].g>>2)<<5)+((pal[i].r>>3)<<11);

    rgb.R = ((c >> 11) & 0x1F) << 3;
    rgb.G = ((c >> 5 ) & 0x3F) << 2;
    rgb.B = (c & 0x1F) << 3;

    return fabgl::RGB222(rgb);
}

#define NES_FRAME_WIDTH 256
#define NES_FRAME_HEIGHT 224

fabgl::Rect rect;

extern "C" void vga_write_pixel(const uint16_t x, const uint16_t y, const uint16_t c)
{
    DisplayController.writeScreenPixel(x, y, c);
}

extern "C" void vga_write_frame(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, const uint8_t *data[])
{
    int xpos, ypos, outputWidth, outputHeight;

    if(1){
        /* place output on center of lcd */
        outputHeight = height;
        outputWidth = width;
        xpos = (320 - outputWidth) / 2;
        ypos = (240 - outputHeight) / 2;
    }
    rect.Y1 = ypos;
    rect.Y2 = ypos+height-1;
    rect.X1 = xpos;
    rect.X2 = xpos+width-1;
    if(data == NULL)
        return;
    DisplayController.writeScreenPalette(rect, data, myPalette);
    
}

extern "C" void vga_init()
{
    DisplayController.begin();    
    DisplayController.setResolution(QVGA_320x240_60Hz);
}
